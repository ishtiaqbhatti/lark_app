import json
from datetime import datetime
from typing import Dict, Any
import logging

from backend.agents.brief_assembler import BriefAssembler
from backend.agents.internal_linking_suggester import InternalLinkingSuggester
from backend.core import utils
from backend.data_access.database_manager import DatabaseManager


class BlueprintFactory:
    def __init__(
        self, openai_client, client_cfg, dataforseo_client, db_manager: DatabaseManager
    ):
        self.brief_assembler = BriefAssembler(openai_client)
        self.internal_linking_suggester = InternalLinkingSuggester(
            openai_client, client_cfg, db_manager
        )
        self.logger = logging.getLogger(self.__class__.__name__)
        self.client_cfg = client_cfg

    def _create_executive_summary(self, blueprint_data: Dict[str, Any]) -> str:
        # Placeholder until SummaryGenerator is integrated here
        return "The executive summary will be generated by the AI based on the full analysis when implementation is complete."

    def create_blueprint(
        self,
        seed_topic: str,
        winning_keyword_data: Dict[str, Any],
        analysis_data: Dict[str, Any],
        total_api_cost: float,
        client_id: str,
    ) -> Dict[str, Any]:
        """Assembles all data into the final, structured JSON blueprint."""

        analysis_notes = None
        competitor_analysis_data = analysis_data.get("competitor_analysis", [])
        if not competitor_analysis_data or (
            len(competitor_analysis_data) == 1
            and "message" in competitor_analysis_data[0]
        ):
            analysis_notes = "No qualified article-based competitors were found in the top results after rigorous qualification. This SERP may be dominated by social media, video, or other non-article formats, making it a challenging topic to rank for with a standard blog post."
            competitor_analysis_data = []  # Ensure it's always an empty list of competitors

        recommended_strategy_data = analysis_data.get("recommended_strategy", {})
        self.logger.info(
            f"STRATEGY DATA FOR BLUEPRINT: {json.dumps(recommended_strategy_data)}"
        )

        blueprint_data = {
            "metadata": {
                "seed_topic": seed_topic,
                "blueprint_version": "6.0",
                "generated_at": datetime.now().isoformat(),
                "total_api_cost": round(total_api_cost, 4),
                "client_id": client_id,
            },
            "winning_keyword": winning_keyword_data,
            "serp_overview": analysis_data.get("serp_overview", {}),
            "content_intelligence": analysis_data.get("content_intelligence", {}),
            "competitor_analysis": competitor_analysis_data,
            "recommended_strategy": recommended_strategy_data,
            "final_qualification_assessment": recommended_strategy_data.get(
                "final_qualification_assessment", {}
            ),
            "analysis_notes": analysis_notes,
        }

        blueprint_data["executive_summary"] = self._create_executive_summary(
            blueprint_data
        )

        # --- START MODIFICATION ---
        # Pass rich serp_overview data to brief_assembler
        blueprint_data["ai_content_brief"] = self.brief_assembler.assemble_brief(
            blueprint_data, client_id, self.client_cfg
        )

        brief_text_for_linking = json.dumps(blueprint_data["ai_content_brief"])
        target_domain = self.client_cfg.get("target_domain")
        key_entities = blueprint_data.get("ai_content_brief", {}).get(
            "key_entities_to_mention", []
        )

        if brief_text_for_linking and target_domain:
            suggestions, linking_cost = self.internal_linking_suggester.suggest_links(
                brief_text_for_linking, key_entities, target_domain, client_id
            )
            blueprint_data["internal_linking_suggestions"] = suggestions
            blueprint_data["metadata"]["total_api_cost"] = round(
                blueprint_data["metadata"]["total_api_cost"] + linking_cost, 4
            )

        keyword_for_slug = winning_keyword_data.get("keyword", seed_topic)
        # Ensure the slug is part of the blueprint
        opportunity_slug = (
            f"{utils.slugify(keyword_for_slug)}-{int(datetime.now().timestamp())}"
        )
        blueprint_data["slug"] = opportunity_slug
        # --- END MODIFICATION ---

        return blueprint_data
